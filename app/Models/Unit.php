<?php

namespace App\Models;

use Exception;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Collection;

class Unit extends Model
{
    use HasFactory;
    public $timestamps = false;
    protected $fillable = ['name','status'];
    protected $appends = array('weights');
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        /*static::addGlobalScope('status', function (Builder $builder){
            $builder->where('status', true);
        });*/
    }
    protected $casts = [
        'status' => 'boolean'
    ];
    public function allWeights(){
        try{
            switch($this->name){
                case "Kilogram":
                    return [0.1,0.2,0.3,0.4,0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 25, 30, 35, 40, 45, 50];
                case "Gram":
                    return [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000];
                case "Dozen":
                    return [0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 ];
                case "Piece":
                    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 ];
            }
        } catch(Exception $e){
            return [];
        }

    }
    public function getWeightsAttribute()
    {
        return $this->weightList();
    }

    public function weightList(){
        $collection = new Collection($this->allWeights());

// Change all items to uppercase and create a new collection of them
        $list = $collection->map(function($item, $key) {
            return ['value' => $item, 'text' => $this->weightText($item)];
        });
        return $list;
    }
    private function weightText($item){
        if($item < 1){
           if($this->sname == "kg"){
               return ($item*1000)."gm";
           } else if($this->sname == "dz") {
                return ($item*12)."pcs";
           }
        }
        return $item.$this->sname;
    }
};

